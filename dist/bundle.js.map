{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/App.ts","src/api/index.ts","src/components/Table.ts"],"names":[],"mappings":"AAAA;;;;;ACAA,IAAA,UAAA,QAAA,oBAAA,CAAA;AAEA,IAAM,SAAS,IAAI,QAAA,KAAJ,CAAW,SAAS,cAAT,CAAwB,OAAxB,CAAX,CAAf;AAEA,IAAI,IAAa,CAAjB;AAEa,QAAA,QAAA,GAAW,MAAM,6CAAN,EACnB,IADmB,CACd;AAAA,WAAY,SAAS,IAAT,EAAZ;AAAA,CADc,EAEnB,IAFmB,CAEd;AAAA,WAAQ,IAAR;AAAA,CAFc,CAAX;;;;;;;ACHb,IAAM,WAAW,sCAAjB;AAEa,QAAA,QAAA,GAA2B,MAAS,QAAT,aACnC,IADmC,CAC9B;AAAA,WAAY,SAAS,IAAT,EAAZ;AAAA,CAD8B,EAEnC,IAFmC,CAE9B;AAAA,WAAQ,IAAR;AAAA,CAF8B,CAA3B;AAIb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChBA,IAAA,UAAA,QAAA,cAAA,CAAA;;IAKa,K,GAKT,eAAY,KAAZ,EAA8B;AAAA;;AAAA;;AAQ9B,SAAA,UAAA,GAAa,YAAK;AACd,gBAAA,QAAA,CAAS,IAAT,CAAc;AAAA,mBAAQ,MAAK,QAAL,CAAc,IAAd,CAAR;AAAA,SAAd;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KAzBD;AA2BA,SAAA,QAAA,GAAW,UAAC,KAAD,EAAe;AACtB,aAAI,IAAI,KAAR,IAAiB,KAAjB,EAAwB;AAAA,+BACc,MAAM,KAAN,CADd;AAAA,gBACZ,IADY,gBACZ,IADY;AAAA,gBACN,QADM,gBACN,QADM;AAAA,gBACI,KADJ,gBACI,KADJ;;AAGpB,gBAAM,UAAU,MAAM,KAAN,EAAa,OAAb,CAAqB,MAArB,GAA8B,IAA9B,GAAqC,MAAM,KAAN,EAAa,OAAb,CAAqB,KAA1D,GAAkE,IAAlE,GACZ,MAAM,KAAN,EAAa,OAAb,CAAqB,IADT,GACgB,IADhB,GACuB,MAAM,KAAN,EAAa,OAAb,CAAqB,OAD5D;AAGA,kBAAK,KAAL,CAAW,IAAX,CAAiB;AACb,sBAAM,IADO;AAEb,0BAAU,QAFG;AAGb,uBAAO,KAHM;AAIb,yBAAS;AAJI,aAAjB;AAMH;AACD,gBAAQ,GAAR,CAAY,MAAK,KAAjB;AACH,KAfD;AAiBA,SAAA,QAAA,GAAW,UAAC,KAAD,EAAgB;AACvB,aAAI,IAAI,KAAR,IAAiB,KAAjB,EAAwB;AAAA,+BACgB,MAAM,KAAN,CADhB;AAAA,gBACZ,MADY,gBACZ,MADY;AAAA,gBACJ,EADI,gBACJ,EADI;AAAA,gBACA,KADA,gBACA,KADA;AAAA,gBACO,IADP,gBACO,IADP;;AAGpB,kBAAK,KAAL,CAAW,EAAX,IAAiB;AACb,wBAAQ,MADK;AAEb,oBAAI,EAFS;AAGb,uBAAO,KAHM;AAIb,sBAAM;AAJO,aAAjB;AAMH;AAEJ,KAZD;AAnDI,SAAK,KAAL,GAAa,EAAb;AACA,SAAK,KAAL,GAAa,EAAb;AACA,SAAK,YAAL,GAAoB,KAApB;AAEA,SAAK,UAAL;AACH,C;;AAXL,QAAA,KAAA,GAAA,KAAA","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import {Table} from \"./components/Table\";\r\n\r\nconst table1 = new Table (document.getElementById(\"table\"));\r\n\r\nlet a : number = 0\r\n\r\nexport const getUsers = fetch('https://jsonplaceholder.typicode.com/users/')\r\n    .then(response => response.json())\r\n    .then(data => data)\r\n    // .then(users => {\r\n    //     a = users.length;\r\n    //     console.log(a);\r\n    //     table1.addUsers(users);\r\n    // })\r\n    // .then(() => {\r\n    //     for(let i = 1; i <= a; i++){\r\n    //         fetch('https://jsonplaceholder.typicode.com/users/' + i + '/posts/')\r\n    //             .then(response => response.json())\r\n    //             .then(posts => {\r\n    //                 table1.addPosts(posts)\r\n    //             });\r\n    //     }\r\n    // })\r\n    // .then(table1.tablePrint)\r\n;","import {IUser} from \"../types/user\";\r\nimport {IPosts} from \"../types/posts\";\r\n\r\nconst BASE_URL = 'https://jsonplaceholder.typicode.com'\r\n\r\nexport const getUsers: Promise<IUser> = fetch(`${BASE_URL}/users`)\r\n    .then(response => response.json())\r\n    .then(data => data)\r\n\r\n// export const getPosts: Promise<IPosts> = fetch(`${BASE_URL}/users`)\r\n//     .then(() => {\r\n//     for(let i = 1; i <= 10; i++){\r\n//         fetch('https://jsonplaceholder.typicode.com/users/' + i + '/posts/')\r\n//             .then(response => response.json())\r\n//             .then(data => data)\r\n//         }\r\n//     });","import {getUsers} from \"../api/index\";\r\nimport {IUser} from \"../types/user\";\r\nimport {IPosts} from \"../types/posts\";\r\nimport {ITable} from \"../types/table\";\r\n\r\nexport class Table implements ITable{\r\n    users: IUser[];\r\n    posts: IPosts[];\r\n    tableElement: HTMLElement;\r\n\r\n    constructor(table: HTMLElement) {\r\n        this.users = [];\r\n        this.posts = [];\r\n        this.tableElement = table;\r\n\r\n        this.tablePrint();\r\n    }\r\n\r\n    tablePrint = () => {\r\n        getUsers.then(data => this.addUsers(data))\r\n\r\n        // this.addUsers(getUsers.then(data => data))\r\n\r\n        //getUsers.then(data => this.addUsers(data))\r\n        //getUsers.then(() => console.log(\"this.users\"));\r\n\r\n        // const tbody = document.createElement(\"tbody\")\r\n        //\r\n        // for(let field in this.users) {\r\n        //     const row = document.createElement(\"tr\")\r\n        //     const tdName = document.createElement(\"td\")\r\n        //\r\n        //\r\n        //     // tdName.innerText = users[field].name\r\n        //     // console.log(tdName.innerText)\r\n        //     row.append(tdName)\r\n        //\r\n        //\r\n        //\r\n        //     tbody.append(row)\r\n        // }\r\n        //\r\n        // this.tableElement.append(tbody)\r\n    }\r\n\r\n    addUsers = (users: any) => {\r\n        for(let field in users) {\r\n            const { name, username, email } = users[field]\r\n\r\n            const address = users[field].address.street + \", \" + users[field].address.suite + \", \" +\r\n                users[field].address.city + \", \" + users[field].address.zipcode;\r\n\r\n            this.users.push ({\r\n                name: name,\r\n                username: username,\r\n                email: email,\r\n                address: address\r\n            } as IUser);\r\n        }\r\n        console.log(this.users)\r\n    }\r\n\r\n    addPosts = (posts : any) => {\r\n        for(let field in posts) {\r\n            const { userId, id, title, body } = posts[field]\r\n\r\n            this.posts[id] = {\r\n                userId: userId,\r\n                id: id,\r\n                title: title,\r\n                body: body\r\n            };\r\n        }\r\n\r\n    }\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}